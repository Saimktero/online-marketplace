# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (views.py) ‚Üí API-–ª–æ–≥–∏–∫–∞ (GET, POST, PUT, DELETE).

from rest_framework import generics, status, permissions, filters
from rest_framework.pagination import PageNumberPagination
from rest_framework.views import APIView
from rest_framework.response import Response
from django.contrib.auth import authenticate
from django.contrib.auth.models import User
from django.views.decorators.cache import cache_page
from django.utils.decorators import method_decorator
from django.core.cache import cache
from django_filters.rest_framework import DjangoFilterBackend
from core.tasks import send_order_confirmation_email
from .serializers import CategorySerializer, ProductSerializer, OrderSerializer, UserSerializer
from .models import Category, Product, Order
from .permissions import IsAdminOrReadOnly, IsOwnerOrAdmin
from .filters import ProductFilter


# –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–¥–∞
class BaseListCreateView(generics.ListCreateAPIView):
    permission_classes = [permissions.IsAuthenticated]


class BaseRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    permission_classes = [permissions.IsAuthenticated]


# –≤—å—é—Ö–∞ Category
class CategoryListCreateView(BaseListCreateView):
    queryset = Category.objects.prefetch_related('products').all().order_by('id')
    serializer_class = CategorySerializer
    permission_classes = [IsAdminOrReadOnly]


class CategoryDetailView(BaseRetrieveUpdateDestroyView):
    queryset = Category.objects.prefetch_related('products').all()
    serializer_class = CategorySerializer
    permission_classes = [IsAdminOrReadOnly]


# –≤—å—é—Ö–∞ Product
class ProductListCreateView(BaseListCreateView):
    queryset = Product.objects.select_related('category').order_by('id').all()
    serializer_class = ProductSerializer
    filter_backends = [DjangoFilterBackend, filters.SearchFilter]
    filterset_class = ProductFilter
    filterset_fields = ['category']
    search_fields = ['name']
    permission_classes = [IsAdminOrReadOnly]
    pagination_class = PageNumberPagination


class ProductDetailView(BaseRetrieveUpdateDestroyView):
    queryset = Product.objects.select_related('category').all()
    serializer_class = ProductSerializer
    permission_classes = [IsAdminOrReadOnly]
    pagination_class = PageNumberPagination


# –≤—å—é—Ö–∞ Order
# @method_decorator(cache_page(60 * 50), name='dispatch')


class OrderListCreateView(BaseListCreateView):
    queryset = Order.objects.select_related('user').prefetch_related('items__product').all()
    serializer_class = OrderSerializer
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['user']

    def get_queryset(self):
        """
            –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã, –∞–¥–º–∏–Ω—ã ‚Äì –≤—Å–µ.
        """
        cache_key = f'user_orders_{self.request.user.id}'
        cached_queryset = cache.get(cache_key)

        if cached_queryset is not None:
            print('\n ‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã –∏–∑ –∫–µ—à–∞')
            return cached_queryset

        # –ï—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î
        qs = super().get_queryset().select_related('user').prefetch_related('items__product')

        if self.request.user.is_staff:
            result = qs
        else:
            result = qs.filter(user=self.request.user).only('id', 'user', 'total_price', 'created_at')

        cache.set(cache_key, result, 60 * 15)
        return result

    def get_serializer_context(self):
        """
            –ü–µ—Ä–µ–¥–∞—ë–º request –≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å user.
        """
        context = super().get_serializer_context()
        context['request'] = self.request
        return context

    def perform_create(self, serializer):
        """–°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
        order = serializer.save()
        order.refresh_from_db()

        # ‚ùó –û—á–∏—â–∞–µ–º –∫—ç—à, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏–ª—Å—è —Å–ø–∏—Å–æ–∫
        cache_key = f'user_orders_{order.user.id}'
        cache.delete(cache_key)
        print(f'üßπ –ö—ç—à –æ—á–∏—â–µ–Ω: {cache_key}')

        if order.user.email:
            send_order_confirmation_email.delay(order.user.email)  # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤ Celery
            print(f'üì® –ó–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É email –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Celery –¥–ª—è "{order.user.email}"')


@method_decorator(cache_page(60 * 15), name='dispatch')
class OrderDetailView(BaseRetrieveUpdateDestroyView):
    queryset = Order.objects.select_related('user').prefetch_related('items__product').all()
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated, IsOwnerOrAdmin]  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∞–¥–º–∏–Ω


# –í—å—é—Ö–∞ User
class UserCreateListView(BaseListCreateView):
    queryset = User.objects.prefetch_related('orders').all()
    serializer_class = UserSerializer
    permission_classes = [permissions.IsAdminUser]


class UserCreateView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = [permissions.AllowAny]


class UserLoginView(APIView):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    def post(self, request):
        username = request.data.get('username')
        password = request.data.get('password')

        user = authenticate(username=username, password=password)

        if user is not None:
            return Response({'message': 'Login successful'}, status=status.HTTP_200_OK)
        else:
            return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)


# –î–µ–ª–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ Railway
"""class TriggerMigrateView(View):
    def get(self, request):
        if os.environ.get("ENV") == "production":
            try:
                call_command("migrate")
                return JsonResponse({"status": "migrated"})
            except Exception as e:
                return JsonResponse({"status": "error", "detail": str(e)}, status=500)
        return JsonResponse({"status": "ignored (not production"})"""


"""""# –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É —Ñ–∏–ª—å—Ç—Ä
def get_queryset(self):
    queryset = super().get_queryset()
    name = self.request.GET.get('name')
    if name:
        queryset = queryset.filter(name_icontains=name.lower()) # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    return queryset"""""
