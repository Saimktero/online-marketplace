# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (views.py) ‚Üí API-–ª–æ–≥–∏–∫–∞ (GET, POST, PUT, DELETE).

from rest_framework import generics, status
from .models import Category, Product, Order
from .serializers import CategorySerializer, ProductSerializer, OrderSerializer, UserSerializer
from django.contrib.auth import authenticate
from django.contrib.auth.models import User
from rest_framework.filters import SearchFilter
from django_filters.rest_framework import DjangoFilterBackend
from .filters import ProductFilter
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAdminUser, AllowAny, IsAuthenticated
from .permissions import IsAdminOrReadOnly, IsOwnerOrAdmin
from core.tasks import send_order_confirmation_email


# –≤—å—é—Ö–∞ Category
class CategoryListCreateView(generics.ListCreateAPIView):
    queryset = Category.objects.all().order_by('id')
    serializer_class = CategorySerializer
    permission_classes = [IsAdminOrReadOnly]


class CategoryDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Category.objects.all()
    serializer_class = CategorySerializer
    permission_classes = [IsAdminOrReadOnly]


# –≤—å—é—Ö–∞ Product
class ProductListCreateView(generics.ListCreateAPIView):
    queryset = Product.objects.select_related('category')
    serializer_class = ProductSerializer
    filter_backends = [DjangoFilterBackend, SearchFilter]
    filterset_class = ProductFilter
    filterset_fields = ['category']
    search_fields = ['name']
    permission_classes = [IsAdminOrReadOnly]


class ProductDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Product.objects.select_related('category')
    serializer_class = ProductSerializer
    permission_classes = [IsAdminOrReadOnly]


# –≤—å—é—Ö–∞ Order
class OrderListCreateView(generics.ListCreateAPIView):
    queryset = Order.objects.select_related('user').prefetch_related('products')
    serializer_class = OrderSerializer
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['user']
    permission_classes = [IsAuthenticated]  # –õ—é–±–æ–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑

    def get_queryset(self):
        """
            –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã, –∞–¥–º–∏–Ω—ã ‚Äì –≤—Å–µ.
        """
        if self.request.user.is_staff:
            return Order.objects.all()
        return Order.objects.filter(user=self.request.user)  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏

    def get_serializer_context(self):
        """
            –ü–µ—Ä–µ–¥–∞—ë–º request –≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å user.
        """
        context = super().get_serializer_context()
        context['request'] = self.request
        return context

    def perform_create(self, serializer):
        """–°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
        order = serializer.save()
        order.refresh_from_db()

        print(f'‚úÖ Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Celery: "{order.user.email}"')  # –õ–æ–≥–∏—Ä—É–µ–º email –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

        if order.user.email and order.user.email.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ email
            send_order_confirmation_email.delay(order.user.email)  # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤ Celery
            print(f'üì® –ó–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É email –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Celery –¥–ª—è "{order.user.email}"')
        else:
            print(f'‚ö† Email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "{order.user.username}", –∑–∞–¥–∞—á–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')


class OrderDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Order.objects.select_related('user').prefetch_related('products')
    serializer_class = OrderSerializer
    permission_classes = [IsAuthenticated, IsOwnerOrAdmin]  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∞–¥–º–∏–Ω


# –í—å—é—Ö–∞ User
class UserCreateListView(generics.ListCreateAPIView):
    queryset = User.objects.prefetch_related('orders–ø')
    serializer_class = UserSerializer
    permission_classes = [IsAdminUser]


class UserCreateView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = [AllowAny]


class UserLoginView(APIView):
    def post(self, request):
        username = request.data.get('username')
        password = request.data.get('password')

        user = authenticate(username=username, password=password)

        if user is not None:
            return Response({'message': 'Login successful'}, status=status.HTTP_200_OK)
        else:
            return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)




"""""# –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É —Ñ–∏–ª—å—Ç—Ä
def get_queryset(self):
    queryset = super().get_queryset()
    name = self.request.GET.get('name')
    if name:
        queryset = queryset.filter(name_icontains=name.lower()) # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    return queryset"""""
