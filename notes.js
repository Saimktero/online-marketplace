# React: минимальные паттерны (jsx) 
1. Данные → список
{items.map((it) => <li key={it.id}>{it.title}</li>)}
2. Условный класс
<li className={page===current ? "selected" : ""}>{page}</li>
3. Состояние + обработчик
const [n,setN] = useState(0);
<button onClick={()=>setN(n+1)}>{n}</button>
4. useMemo
const totalPages = useMemo(()=>Math.ceil(totalCount/pageSize),[totalCount,pageSize])
5. Guard
const goTo = (p)=>setCurrentPage(Math.min(Math.max(1,p),totalPages))
6. Шаблоны
List — компонент для отображения массива
Pagination — базовый каркас пагинации
ProductsPage — родитель: хранит состояние, считает totalPages, срезает массив[

---

# SQL теория (PostgreSQL как стандарт)

## Типы данных
1) INT/INTEGER — целое число.
   Пример: 1, 2, 3
2) VARCHAR(n) — строки ограниченной длины.
   Пример: VARCHAR(100) → максимум 100 символов.
3) DECIMAL(p,s) / NUMERIC(p,s) — точные числа с фиксированной запятой (идеально для цен и денег).
   p = общее количество цифр, s = количество после точки.
   Пример: NUMERIC(10,2) → до 8 цифр до точки и 2 после.
4) DATE — дата в формате ГГГГ-ММ-ДД.
5) BOOLEAN — логический тип (TRUE/FALSE).  
   (В MySQL часто используют TINYINT(1) → 0/1.)

## Создание таблицы
1) PRIMARY KEY — ключевое поле таблицы (уникальный идентификатор строки). 
У каждой строки в таблице должен быть уникальный идентификатор (ключ).
PRIMARY KEY = это как паспорт для строки: он уникален и не может быть NULL.
2) PostgreSQL:  
   - `SERIAL` → старый способ автоинкремента.  
   - `GENERATED ALWAYS AS IDENTITY` → современный стандарт.  
   ```sql
   id SERIAL PRIMARY KEY
   id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY
3) MySQL (для справки): AUTO_INCREMENT — автоматическая генерация значения при вставке.
При добавлении новой строки в таблицу поле автоматически увеличивается на 1.
Т.е. тебе не нужно вручную указывать id, база сама поставит следующее значение.

## Вставка записи в таблицу:
1) INSERT INTO таблица(поле1, поле2) - добавление полей в действующую таблицу.
2) VALUES (значение1, значение2); - добавление значений в созданные поля.
Примечание - значение1 должно относиться к полю1 и т.д.

## Чтобы увидеть, как именно выглядит таблица:
SELECT * FROM 'таблица'.

## Базовые запросы.
1) SELECT — выбирает нужные колонки.
2) WHERE — фильтрует строки по условию.
3) LIMIT — ограничивает количество строк.
4) ORDER BY — сортировка.

## Чтобы вывести отдельные части таблицы и одновременно поменять в выводе имя столбца на псевдоним:
SELECT "имя столбца" AS "псевдоним" FROM "таблица"

## Занести в поле значение, в завиимости от условия:
1) PostgreSQL:
CASE 
  WHEN условие THEN значение1
  ELSE значение2
END
2) MySQL (отличие): IF(логическое_выражение, выражение_1, выражение_2)

## Математические функции
- CEILING(x) - возвращает наименьшее целое число, большее или равное x (округляет до целого числа в большую сторону);
- ROUND(x, k) - округляет значение x до k знаков после запятой, если k не указано – x округляется до целого;
- FLOOR(x) - возвращает наибольшее целое число, меньшее или равное x (округляет до  целого числа в меньшую сторону)	;
- POWER(x, y) возведение x в степень y;
- SQRT(x) квадратный корень из x;	
- DEGREES(x) конвертирует значение x из радиан в градусы;
- RADIANS(x) конвертирует значение x из градусов в радианы;
- ABS(x) модуль числа x;
- PI() pi = 3.1415926...

## Приоритеты операций:
1) круглые скобки;
2) умножение  (*),  деление (/);
3) сложение  (+), вычитание (-);
4) операторы сравнения (=, >, <, >=, <=, <>);
5) NOT;
6) AND;
7) OR.

## операторы BETWEEN, IN
1) BETWEEN - позволяет отобрать данные, относящиеся к некоторому интервалу, включая его границы. 
2) IN - позволяет выбрать данные, соответствующие значениям из списка.

## Выборка данных:
1) ORDER BY - сортирует строки по выбранным колонкам.
    - ASC (ascending) — по возрастанию (по умолчанию).
    - DESC (descending) — по убыванию.
    - Можно указывать несколько колонок → сортировка идёт сначала по первой, если одинаково — по второй.
2) LIKE - используется для сравнения строк. Позволяет сравнивать в соответствиии с шаблоном.
    - Символ-шаблон '%': Любая строка, содержащая ноль или более символов.
      * Пример: SELECT * FROM book WHERE author LIKE '%М.%'
        выполняет поиск и выдает все книги, инициалы авторов которых содержат «М.».
    - Символ-шаблон '_ (подчеркивание)': Любой одиночный символ
      * Пример: SELECT * FROM book WHERE title LIKE 'Поэм_'
        выполняет поиск и выдает все книги, названия которых либо «Поэма», либо «Поэмы» и пр.

## Выбор уникальных элементов столбца:
1) DISTINCT - уникальные сочетания значений в указанных столбцах (размещается сразу после слова SELECT).
   *Примечание: Т.е. если в SELECT указать не один столбец, а несколько, то, если в источнике есть строки, где во всех
    столбцах значения совпадают, из них будет выбрана только одна, но если хоть в одном из столбцов значение будет
    отличаться, то эти строки будут все попадать в выборку.
2) GROUP BY - выбирает уникальные элементы столбца, по которому осуществляется группировка (указывается после
    строчки FROM 'Столбец').
    *Премечание: Ответ будет точно такой же как и у DISTICNCT, но у GROUP BY есть есть агрегатная функция
     COUNT('столбец')  - c её помощью мы можем получить количество уникальных строк для каждой категории
     или SUM('столбец') - сумму просуммировать элементы в "Название таблицы".
    !Из минусов - GROUP BY во много раз медленьнее DISTICNCT.
3) К групповым функциям SQL относятся:
    - MIN() - минимальное значение элементов столбца, относящихся к группе.
    - MAX() - максимальное значение элементов столбца, относящихся к группе.
    - AVG() - среднее значение элементов столбца, относящихся к группе.

  !!Важно: GROUP BY задаёт, по каким колонкам мы группируем строки.
           Все остальные колонки в SELECT должны быть либо в GROUP BY, либо внутри агрегата (COUNT, SUM и т.п.).

- В запросы с групповыми функциями можно включать условие отбора строк, которое в обычных запросах записывается после
WHERE. В запросах с групповыми функциями вместо WHERE используется ключевое слово HAVING, которое размещается после
оператора GROUP BY.

---

# JavaScript.

- Внедрение кода JavaScript в документ HTML.
Есть два места размещения: в голове и теле страницы.
Премечание: большой объём кода в заголовке сильно замедляет загрузку страницы.

---

# Основы HTML.

- Теги расставляются как дорожные знаки с названием города. На въезде в город знак объявляет его имя, а на выезде
перечеркнутое имя сообщает, что город закончился. Так и в начале HTML-элемента ставят открывающий тег с именем тега, 
а в конце — закрывающий тег, где имя будто перечеркнуто косой чертой. Созданный элемент называют по имени тега.
- в HTML комментарии заключаются в "<!-- и -->"
- Структура html-документа и теги:
    - в самом верху принято указывать тип документа. <!doctype html> (новая версия html - пятая).
    * простейшая HTML-страница состоит как минимум из трёх тегов: <html>, <head> и <body>.
    - Тег <html> располагается в документе сразу после доктайпа и содержит все остальные теги, включая <head> и <body>.
    - Тегу <html> обычно добавляют важный атрибут lang(сокращение от английского «language»), в котором задаётся язык
      документа: "<html lang="ru">".
    - Тег <head> хранит важную служебную информацию, а в теге <body> хранится содержание страницы, которое отображается 
      в окне браузера.
    - Важный тег, который включается в <head> — тег <meta>. Он одиночный, то есть не требует парного закрывающего тега 
      в конце. Спомощью <meta> можно сообщать браузеру, поисковому роботу или другому устройству различную служебную 
      информацию.
    - Ещё один элемент, который располагается в <head> — это тег <title>. В нём задаётся заголовок страницы, 
      который отображается во вкладках браузера.
    - Тег <title> - содержит в себе название веб-страницы, отображаемое в "шапке" браузера
    - Теги <h1> - <h6> (heading) - обозначают заголовки.
    - Тег <p> (paragraph) - обозначает параграф.
    - Тег <a> (anchor, "якорь") - добавляет ссылки, превращая текст веб-страницы в гипертекст
    * Для дополнительных сведений у тегов есть атрибуты (по-латыни «признаки»). Так, адрес хранится в атрибуте
      с именем href (от англ. hypertext reference, «гипертекстовая ссылка»).
    - Помимо непременного href, тег a может иметь необязательный атрибут target (англ. target, «мишень»). 
      Он «нацеливает» браузер, указывая вкладку, где нужно открыть страницу, на которую ведёт ссылка. 
      Без атрибута target она откроется в текущей вкладке. Если добавлен атрибут target со 
      значением “_blank” (от англ. blank, «чистый»), то другая страница будет показана в новой, пустой вкладке.
    - Тег <ul></ul> (от англ. unordered list — неупорядоченный список) - создание маркированного списка, внутри него
      лежат элементы, которые мы заключаем в теги <li></li> (от англ. list item — пункт списка).
    - Тег <ol><ol> (от англ. ordered list — упорядоченный список) - создание нумерованного списка, внутри него лежат
      элементы, которые мы заключаем в теги <li></li>.
        - Если хотите, чтобы список начинался с номера, отличного от 1, следует указать это при помощи атрибута start,
          как показано в следующем примере: <ol start="17">.
    - <dl></dl> - это список определений (пары имя/значение), он содержит в себе:
        - тег <dt></dt> - обозначают имена, отображаются как заголовок
        - тег <dd></dd> находится внутри <dt>, и обозначает соответствующее ему значение
        - тег <hr> добавляет разделитель между логическими разделами или абзацами текста без введения нового уровня 
          заголовка, «горизонтальная линия».
    - Встроенные теги для форматирования текста:
        - <b></b> - bold — жирный
        - <i></i> - italic — курсив
        - <sup></sup> - superscript — верхний индекс
        - <sub></sub> - subscript — нижний индекс
        - <em></em> - emphasis — акцент
        * Примечание: Тег <strong> определяет важность отмеченного текста.
          Тег <b> предназначен для выделения текста без придания ему особой важности.
          Визуально оба тега одинаковы, они выделяют текст полужирным.
          Лучше всего отличия этих тегов будут заметны людям, которые используют специальные настройки ОС, в частности,
          слепым и слабовидящим. Когда они включают функцию чтения текста, то «говорилка» будет интонацией выделять
          слова с тегом <strong>. То же самое касается и тегов <em> и <i>. Тег <em> «говорилка» будет выделять
          интонацией.
    - Таблицы.
        Минимальная структура:
            <table></table> - тело таблицы.
            <tr></tr> (сокращение от table row — строка таблицы).
            <th></th> (сокращение от table headers — заголовки таблицы).
            <td></td> (сокращение от table data — данные таблицы).
        <caption></caption> - С помощью элемента caption создайте краткое пояснение, которое будет отображаться рядом
                               с таблицей. Его можно использовать для описания содержимого таблицы или предоставления
                               подсказок по ее структуре.
                               # Важно - В элементе table элемент caption должен указываться прежде всех остальных!
        Объединение: Объединение столбцов достигается с помощью атрибута colspan в элементах td или th — ячейка
        растягивается вправо, охватывая последующие столбцы.  "<th colspan="2">Жиры (г)</th>"
                     Диапазоны строк, объединенные при помощи атрибута rowspan, ведут себя точно так же, как
                     объединенные диапазоны столбцов, с той лишь разницей, что диапазон ячеек задается сверху вниз
                     и охватывает несколько строк.

## Графика и изображение.
Все изображения для сайтов, подразделяются:
    - растровые — JPG, JPEG, PNG, GIF (Состоит из пикселей, при масштабировании качество теряется);
    - векторные — SVG (Состоит из линий и точек маршрута).

Тег <img> — указывает браузеру: «Вставь изображение сюда».
    - <img src="image.jpg" alt="Описание изображения">
    * Атрибуты src и alt являются обязательными.
      Src - сообщает браузеру расположение файла изображения;
      Alt - передаёт замещающий текст, который отображается на сайте, если изображение не доступно.
    * Атрибуты width и height задают размеры изображения, измеряемые в количестве пикселов (с их помощью можно ускорить
      загрузку страницы на несколько секунд)
        - <img src="apple.jpg" width="400" height="400" alt="Яблоко">