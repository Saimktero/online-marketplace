# React: минимальные паттерны (jsx) 
1. Данные → список
{items.map((it) => <li key={it.id}>{it.title}</li>)}
2. Условный класс
<li className={page===current ? "selected" : ""}>{page}</li>
3. Состояние + обработчик
const [n,setN] = useState(0);
<button onClick={()=>setN(n+1)}>{n}</button>
4. useMemo
const totalPages = useMemo(()=>Math.ceil(totalCount/pageSize),[totalCount,pageSize])
5. Guard
const goTo = (p)=>setCurrentPage(Math.min(Math.max(1,p),totalPages))
6. Шаблоны
List — компонент для отображения массива
Pagination — базовый каркас пагинации
ProductsPage — родитель: хранит состояние, считает totalPages, срезает массив[


------------------------------------------------------------------------------------------------------------------------


# SQL теория (PostgreSQL как стандарт)

## Типы данных
1) INT/INTEGER — целое число.
   Пример: 1, 2, 3
2) VARCHAR(n) — строки ограниченной длины.
   Пример: VARCHAR(100) → максимум 100 символов.
3) DECIMAL(p,s) / NUMERIC(p,s) — точные числа с фиксированной запятой (идеально для цен и денег).
   p = общее количество цифр, s = количество после точки.
   Пример: NUMERIC(10,2) → до 8 цифр до точки и 2 после.
4) DATE — дата в формате ГГГГ-ММ-ДД.
5) BOOLEAN — логический тип (TRUE/FALSE).  
   (В MySQL часто используют TINYINT(1) → 0/1.)

## Создание таблицы

    Для создания таблицы используется SQL-запрос. В нем указывается какая таблица создается, из каких атрибутов(полей) она
    состоит и какой тип данных имеет каждое поле, при необходимости указывается описание полей (ключевое поле и т.д.).
    Его структура :
        ключевые слова : CREATE TABLE
        имя создаваемой таблицы;
        открывающа
        я круглая скобка «(»;
        название поля и его описание, которое включает тип поля и другие необязательные характеристики;
        запятая;
        название поля и его описание;
        ...
        закрывающая скобка «)».
Пример. Создадим таблицу genre следующей структуры:


1) Для описания ключевого поля используйте описание INT PRIMARY KEY AUTO_INCREMENT. Это значит, что в поле будут
заноситься различные целые числа, при этом они будут автоматически генерироваться (каждая следующая строка будет иметь
значение ключа на 1 больше предыдущего).
PRIMARY KEY = это как паспорт для строки: он уникален и не может быть NULL.

PostgreSQL:
   - `SERIAL` → старый способ автоинкремента.  
   - `GENERATED ALWAYS AS IDENTITY` → современный стандарт.  
   ```sql
   id SERIAL PRIMARY KEY
   id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY
MySQL (для справки): AUTO_INCREMENT — автоматическая генерация значения при вставке.
При добавлении новой строки в таблицу поле автоматически увеличивается на 1.
Т.е. тебе не нужно вручную указывать id, база сама поставит следующее значение.

Пример запроса создания таблицы:
    CREATE TABLE genre(
        genre_id INT PRIMARY KEY AUTO_INCREMENT,
        name_genre VARCHAR(30)
    );

## Вставка записи в таблицу:
1) INSERT INTO таблица(поле1, поле2) - добавление полей в действующую таблицу.
2) VALUES (значение1, значение2); - добавление значений в созданные поля.
Примечание - значение1 должно относиться к полю1 и т.д.

## Чтобы увидеть, как именно выглядит таблица:
SELECT * FROM 'таблица'.

## Базовые запросы.
1) SELECT — выбирает нужные колонки.
2) WHERE — фильтрует строки по условию.
3) LIMIT — ограничивает количество строк.
4) ORDER BY — сортировка.

## Чтобы вывести отдельные части таблицы и одновременно поменять в выводе имя столбца на псевдоним:
SELECT "имя столбца" AS "псевдоним" FROM "таблица"

## Занести в поле значение, в завиимости от условия:
1) PostgreSQL:
CASE 
  WHEN условие THEN значение1
  ELSE значение2
END
2) MySQL (отличие): IF(логическое_выражение, выражение_1, выражение_2)
Функция вычисляет логическое_выражение, если оно истина – в поле заносится значение выражения_1, в противном
случае –  значение выражения_2. Все три параметра IF() являются обязательными.
Допускается использование вложенных функций, вместо выражения_1 или выражения_2 может стоять новая функция IF.

## Математические функции
- CEILING(x) - возвращает наименьшее целое число, большее или равное x (округляет до целого числа в большую сторону);
- ROUND(x, k) - округляет значение x до k знаков после запятой, если k не указано – x округляется до целого;
- FLOOR(x) - возвращает наибольшее целое число, меньшее или равное x (округляет до  целого числа в меньшую сторону)	;
- POWER(x, y) возведение x в степень y;
- SQRT(x) квадратный корень из x;	
- DEGREES(x) конвертирует значение x из радиан в градусы;
- RADIANS(x) конвертирует значение x из градусов в радианы;
- ABS(x) модуль числа x;
- PI() pi = 3.1415926...

## Приоритеты операций:
1) круглые скобки;
2) умножение  (*),  деление (/);
3) сложение  (+), вычитание (-);
4) операторы сравнения (=, >, <, >=, <=, <>);
5) NOT;
6) AND;
7) OR.

## операторы BETWEEN, IN
1) BETWEEN - позволяет отобрать данные, относящиеся к некоторому интервалу, включая его границы. 
2) IN - позволяет выбрать данные, соответствующие значениям из списка.

## Выборка данных:
1) ORDER BY - сортирует строки по выбранным колонкам.
    - ASC (ascending) — по возрастанию (по умолчанию).
    - DESC (descending) — по убыванию.
    - Можно указывать несколько колонок → сортировка идёт сначала по первой, если одинаково — по второй.
2) LIKE - используется для сравнения строк. Позволяет сравнивать в соответствиии с шаблоном.
    - Символ-шаблон '%': Любая строка, содержащая ноль или более символов.
      * Пример: SELECT * FROM book WHERE author LIKE '%М.%'
        выполняет поиск и выдает все книги, инициалы авторов которых содержат «М.».
    - Символ-шаблон '_ (подчеркивание)': Любой одиночный символ
      * Пример: SELECT * FROM book WHERE title LIKE 'Поэм_'
        выполняет поиск и выдает все книги, названия которых либо «Поэма», либо «Поэмы» и пр.

## Выбор уникальных элементов столбца:
1) DISTINCT - уникальные сочетания значений в указанных столбцах (размещается сразу после слова SELECT).
   *Примечание: Т.е. если в SELECT указать не один столбец, а несколько, то, если в источнике есть строки, где во всех
    столбцах значения совпадают, из них будет выбрана только одна, но если хоть в одном из столбцов значение будет
    отличаться, то эти строки будут все попадать в выборку.
2) GROUP BY - выбирает уникальные элементы столбца, по которому осуществляется группировка (указывается после
    строчки FROM 'Столбец').
   Премечание: Ответ будет точно такой же как и у DISTICNCT, но у GROUP BY есть есть агрегатная функция
     COUNT('столбец')  - c её помощью мы можем получить количество уникальных строк для каждой категории
     или SUM('столбец') - сумму просуммировать элементы в "Название таблицы".
    !Из минусов - GROUP BY во много раз медленьнее DISTICNCT.
3) К групповым функциям SQL относятся:
    - MIN() - минимальное значение элементов столбца, относящихся к группе.
    - MAX() - максимальное значение элементов столбца, относящихся к группе.
    - AVG() - среднее значение элементов столбца, относящихся к группе.

  !!Важно: GROUP BY задаёт, по каким колонкам мы группируем строки.
           Все остальные колонки в SELECT должны быть либо в GROUP BY, либо внутри агрегата (COUNT, SUM и т.п.).
 
- В запросы с групповыми функциями можно включать условие отбора строк, которое в обычных запросах записывается после
WHERE. В запросах с групповыми функциями вместо WHERE используется ключевое слово HAVING, которое размещается после
оператора GROUP BY.

## Последовательность выполнения операций на сервере:
PostgreSQL: FROM => WHERE = GROUP BY = HAVING = SELECT = DISTINCT = ORDER BY = LIMIT.
MySQL: FROM => WHERE = SELECT = GROUP BY = HAVING = ORDER BY = LIMIT.

## Вложенные запросы:
1) Пример:
Вывести информацию о самых дешевых книгах, хранящихся на складе.
Для реализации этого запроса нам необходимо получить минимальную цену из столбца price таблицы book, а затем вывести
информацию о тех книгах, цена которых  равна минимальной. Первая часть  – поиск  минимума – реализуется вложенным 
запросом.

Запрос:
SELECT title, author, price, amount
FROM book
WHERE price = (
         SELECT MIN(price) 
         FROM book
      );

Результат:
+-------+------------------+--------+--------+
| title | author           | price  | amount |
+-------+------------------+--------+--------+
| Идиот | Достоевский Ф.М. | 460.00 | 10     |
+-------+------------------+--------+--------+

Вложенный запрос определяет минимальную цену книг во всей таблице (это 460.00), а затем в основном запросе для каждой
записи проверяется, равна ли цена минимальному значению, если равна, информация о книге включается в результирующую
таблицу запроса.

2) Вложенный запрос может возвращать несколько значений одного столбца. Тогда его можно использовать в разделе WHERE 
совместно с оператором IN.
  * --- WHERE имя_столбца IN (вложенный запрос, возвращающий один столбец) --- *
Оператор IN определяет, совпадает ли значение столбца с одним из значений, содержащихся во вложенном запросе. При этом 
логическое выражение после WHERE получает значение истина. Оператор NOT IN выполняет обратное действие – 
выражение истинно, если значение столбца не содержится во вложенном запросе.

3) Операторы ANY и ALL используются с предложением WHERE или HAVING.
Оператор ANY возвращает true (истина), если какое-либо из значений подзапроса удовлетворяет условию.
Оператор ALL возвращает true (истина), если все значения подзапроса удовлетворяют условию.
Важно! Операторы ALL и ANY можно использовать только с вложенными запросами. 

4) Вложенный запрос может располагаться после ключевого слова SELECT. В этом случае результат выполнения запроса 
выводится в отдельном столбце результирующей таблицы. При этом результатом запроса может быть только одно значение,
тогда оно будет повторяться во всех строках. Также вложенный запрос может использоваться в выражениях.

## Добавление записей в таблицу.
Добавление одной записи в таблицу осуществляется с помощью запроса INSERT, подробно рассмотренного в первом уроке.
Запросы обязательно разделять точкой с запятой. Допускается вставка нескольких записей одновременно, для этого
используется SQL запрос следующего вида:
    INSERT INTO имя_таблицы(столбец_1, столбец_2, ..., столбец_N)
    VALUES
        (значение_1_1, значение_1_2, ..., значение_1_N),
        (значение_2_1, значение_2_2, ..., значение_2_N),
        ...
        (значение_M_1, значение_M_2, ..., значение_M_N);

    *Например, чтобы добавить в таблицу book две новые записи используется запрос:
        INSERT INTO book (title, author, price, amount)
        VALUES
            ('Война и мир','Толстой Л.Н.', 1070.20, 2),
            ('Анна Каренина', 'Толстой Л.Н.', 599.90, 3);

## Добавление записей из другой таблицы.
  С помощью запроса на добавление можно не только добавить в таблицу конкретные значения (список VALUES), но и записи из
  другой таблицы, отобранные с помощью запроса на выборку.  В этом случае вместо раздела VALUES записывается запрос на
  выборку, начинающийся с SELECT.  В нем можно использовать WHERE, GROUP BY, ORDER BY.
  * Пример:
    Занести все книги из таблицы supply в таблицу book.
    Запрос:
        INSERT INTO book (title, author, price, amount)
        SELECT title, author, price, amount
        FROM supply;

        SELECT * FROM book;


##Добавление записей, вложенные запросы
В запросах на добавление можно использовать вложенные запросы.
Пример:
        Занести из таблицы supply в таблицу book только те книги, названия которых отсутствуют в таблице book.
Запрос:
        INSERT INTO book (title, author, price, amount)
        SELECT title, author, price, amount
        FROM supply
        WHERE title NOT IN (
                SELECT title
                FROM book
              );

        SELECT * FROM book;
Вложенным запросом отбираются все названия книг, которые есть в таблице book. Основным запросом SELECT из таблицы supply
выбираются книги, названия которых нет в результате вложенного запроса. Отобранные записи добавляются в конец таблицы
bookзапросом на добавление INSERT.


## Запросы на обновление
Под обновлением данных подразумевается изменение значений в существующих записях таблицы. При этом возможно как
изменение значений полей в группе строк (даже всех строк таблицы), так и правка значения поля отдельной строки.
Изменение записей в таблице реализуется с помощью запроса UPDATE. Простейший запрос на  обновление выглядит так:
    UPDATE таблица SET поле = выражение
Таблица – имя таблицы, в которой будут проводиться изменения;
поле – поле таблицы, в которое будет внесено изменение;
выражение – выражение,  значение которого будет занесено в поле.


## Запросы на обновление нескольких столбцов
Запросом UPDATE можно обновлять значения нескольких столбцов одновременно. В этом случае простейший запрос будет
выглядеть так:
    UPDATE таблица SET поле1 = выражение1, поле2 = выражение2


## Запросы на обновление нескольких таблиц
В запросах на обновление можно использовать несколько таблиц, но тогда:
    - для столбцов, имеющих одинаковые имена, необходимо указывать имя таблицы, к которой они относятся, например,
       book.price – столбец price из таблицы book, supply.price – столбец price из таблицы supply;
    - все таблицы, используемые в запросе, нужно перечислить после ключевого слова UPDATE;
    - в запросе обязательно условие WHERE, в котором указывается условие при котором обновляются данные.
Пример:
    Если в таблице supply  есть те же книги, что и в таблице book, добавлять эти книги в таблицу book не имеет смысла.
    Необходимо увеличить их количество на значение столбца amountтаблицы supply.
Запрос:
    UPDATE book, supply
    SET book.amount = book.amount + supply.amount
    WHERE book.title = supply.title AND book.author = supply.author;

    SELECT * FROM book;


## Запросы на удаление
Запросы корректировки данных позволяют удалить одну или несколько записей из  таблицы. Простейший запрос на удаление
имеет вид:
    DELETE FROM таблица;


## Оператор LIMIT.
 Для ограничения вывода записей в SQL используется оператор LIMIT , после которого указывается количество строк.
Результирующая таблица будет иметь количество строк не более указанного после LIMIT. LIMIT размещается после раздела
ORDER BY.


## Даты.
1) Для вычитания двух дат используется функция DATEDIFF(дата_1, дата_2), результатом которой является количество дней
 между дата_1 и дата_2. Например,
DATEDIFF('2020-04-01', '2020-03-28')=4
DATEDIFF('2020-05-09','2020-05-01')=8
DATEDIFF(date_last, date_first);

2) Для того, чтобы выделить номер месяца из даты используется функция MONTH(дата).
Например, MONTH('2020-04-12') = 4.
Если определяется месяц для  значений столбца date_first, то используется запись MONTH(date_first);

3)
- Для того, чтобы выделить название месяца из даты используется функция MONTHNAME(дата), которая возвращает название
    месяца на английском языке для указанной даты. Например, MONTHNAME('2020-04-12')='April'.
- Если группировка осуществляется по вычисляемому столбцу (в данном случае «вычисляется» название месяца), то после
    GROUP BYможно указать как вычисляемое выражение, так и имя столбца, заданное с помощью AS. Важно отметить, что
    последний вариант (указать имя столбца)  нарушает стандарт по порядку выполнения запросов, но иногда может
    встречаться на реальных платформах.

4)
- В SQL есть функции, которые позволяют выделить часть даты: день(DAY()), месяц (MONTH()), год(YEAR()) . Например:
    DAY('2020-02-01') = 1
    MONTH('2020-02-01') = 2
    YEAR('2020-02-01') = 2020
- Количество дней командировки вычисляется как разница между датами последнего и первого дня командировки плюс 1.

## Использование временного имени таблицы (алиаса).
Чтобы не писать название таблицы каждый раз, удобно использовать алиасы.
Алиас, это псевдоним, который мы присваивали столбцам после ключевого слова AS(шаг).  Алиасы так же можно использовать
и для таблиц. Это становится актуальным, при увеличении числа используемых таблиц, их иногда может быть и 5 и 10 и
более. Псевдонимы помогают сделать запрос чище и читабельнее.

Для присваивания псевдонима существует 2 варианта:
    1) с использованием ключевого слова AS
        FROM fine AS f, traffic_violation AS tv
    2) а так же и без него
        FROM fine f, traffic_violation tv
После присвоения таблице алиаса, он используется во всех разделах запроса, в котором алиас задан. Например:
        WHERE f.violation = tv.violation

    Пример.
        Для тех, кто уже оплатил штраф, вывести информацию о том, изменялась ли стандартная сумма штрафа.
        Запрос:
        SELECT  f.name, f.number_plate, f.violation,
           if(
            f.sum_fine = tv.sum_fine, "Стандартная сумма штрафа",
            if(
              f.sum_fine < tv.sum_fine, "Уменьшенная сумма штрафа", "Увеличенная сумма штрафа"
            )
          ) AS description
        FROM  fine f, traffic_violation tv
        WHERE tv.violation = f.violation and f.sum_fine IS NOT Null;
    Или по стандартам SQL:
        SELECT
          f.name,
          f.number_plate,
          f.violation,
          CASE
              WHEN f.sum_fine = tv.sum_fine THEN 'Стандартная сумма штрафа'
              WHEN f.sum_fine < tv.sum_fine THEN 'Уменьшенная сумма штрафа'
              ELSE 'Увеличенная сумма штрафа'
          END AS description
        FROM fine f
        JOIN traffic_violation tv ON tv.violation = f.violation
        WHERE f.sum_fine IS NOT NULL;
------------------------------------------------------------------------------------------------------------------------


# JavaScript.

- Внедрение кода JavaScript в документ HTML.
Есть два места размещения: в голове и теле страницы.
Премечание: большой объём кода в заголовке сильно замедляет загрузку страницы.


------------------------------------------------------------------------------------------------------------------------


# Основы HTML.
  * Веб-сайт (сайт) – совокупность взаимосвязанных страниц, содержащих текстовую и графическую информацию. Страницы эти 
    создаются с использованием специальных языков, простейшим и основным из которых является HTML (язык гипертекстовой
    разметки документов). Овладеть им и создать собственный сайт может любой.
    HTML (HyperText Markup Language) говорит браузеру, каково содержание страницы, например, «заголовок», «параграф»,
    «список», «элемент списка».


- Теги расставляются как дорожные знаки с названием города. На въезде в город знак объявляет его имя, а на выезде
перечеркнутое имя сообщает, что город закончился. Так и в начале HTML-элемента ставят открывающий тег с именем тега, 
а в конце — закрывающий тег, где имя будто перечеркнуто косой чертой. Созданный элемент называют по имени тега.
- в HTML комментарии заключаются в "<!-- и -->"
## Структура html-документа и теги:
    - в самом верху принято указывать тип документа. <!doctype html> (новая версия html - пятая).
    * простейшая HTML-страница состоит как минимум из трёх тегов: <html>...</html>, <head>...<head> и <body>...<body>.
    - Тег <html> располагается в документе сразу после доктайпа и содержит все остальные теги, включая <head> и <body>.
    - Тегу <html> обычно добавляют важный атрибут lang(сокращение от английского «language»), в котором задаётся язык
      документа: "<html lang="ru">".
    - Тег <head> хранит важную служебную информацию, а в теге <body> хранится содержание страницы, которое отображается 
      в окне браузера.
    - Важный тег, который включается в <head> — тег <meta>. Он одиночный, то есть не требует парного закрывающего тега 
      в конце. Спомощью <meta> можно сообщать браузеру, поисковому роботу или другому устройству различную служебную 
      информацию.
    - Тег <title>...<title> располагается в <head> - содержит в себе название веб-страницы, отображаемое в "шапке" 
      браузера.
    - Теги <h1>...</h1> - <h6>...</h6> (heading) - обозначают заголовки.
    - Тег <p>...</p> (paragraph) - обозначает параграф.

## Ссылки.
    Тег <a href='ссылка'>'Текст'</a> (anchor, "якорь") - добавляет ссылки, превращая текст веб-страницы в гипертекст
    * Для дополнительных сведений у тегов есть атрибуты (по-латыни «признаки»). Так, адрес хранится в атрибуте
      с именем href (от англ. hypertext reference, «гипертекстовая ссылка»).
    - Помимо непременного href, тег a может иметь необязательный атрибут target (англ. target, «мишень»). 
      Он «нацеливает» браузер, указывая вкладку, где нужно открыть страницу, на которую ведёт ссылка. 
      Без атрибута target она откроется в текущей вкладке. Если добавлен атрибут target со 
      значением “_blank” (от англ. blank, «чистый»), то другая страница будет показана в новой, пустой вкладке.

## разметка текста.
    - Тег <ul>...</ul> (от англ. unordered list — неупорядоченный список) - создание маркированного списка, внутри него
      лежат элементы, которые мы заключаем в теги <li>...</li> (от англ. list item — пункт списка).
    - Тег <ol>...<ol> (от англ. ordered list — упорядоченный список) - создание нумерованного списка, внутри него лежат
      элементы, которые мы заключаем в теги <li>...</li>.
        - Если хотите, чтобы список начинался с номера, отличного от 1, следует указать это при помощи атрибута start,
          как показано в следующем примере: <ol start="17">.
    - <dl>...</dl> - это список определений (пары имя/значение), он содержит в себе:
        - тег <dt>...</dt> - обозначают имена, отображаются как заголовок
        - тег <dd>...</dd> находится внутри <dt>, и обозначает соответствующее ему значение
        - тег <hr> добавляет разделитель между логическими разделами или абзацами текста без введения нового уровня 
          заголовка, «горизонтальная линия».
    - Встроенные теги для форматирования текста:
        - <b>...</b> - bold — жирный
        - <i>...</i> - italic — курсив
        - <sup>...</sup> - superscript — верхний индекс
        - <sub>...</sub> - subscript — нижний индекс
        - <em>...</em> - emphasis — акцент
        * Примечание: Тег <strong> определяет важность отмеченного текста.
          Тег <b> предназначен для выделения текста без придания ему особой важности.
          Визуально оба тега одинаковы, они выделяют текст полужирным.
          Лучше всего отличия этих тегов будут заметны людям, которые используют специальные настройки ОС, в частности,
          слепым и слабовидящим. Когда они включают функцию чтения текста, то «говорилка» будет интонацией выделять
          слова с тегом <strong>. То же самое касается и тегов <em> и <i>. Тег <em> «говорилка» будет выделять
          интонацией.
        - Элемент <br> (от англ. line break — перенос строки) устанавливает перевод строки в том месте, где он
          находится. В отличие от элемента< p>, использование< br> не добавляет пустой отступ перед строкой.

## Таблицы.
    Минимальная структура:
        - <table>...</table> - тело таблицы.
        - <tr>...</tr> (сокращение от table row — строка таблицы).
        - <th>...</th> (сокращение от table headers — заголовки таблицы).
        - <td>...</td> (сокращение от table data — данные таблицы).
        <caption></caption> - С помощью элемента caption создайте краткое пояснение, которое будет отображаться рядом
                               с таблицей. Его можно использовать для описания содержимого таблицы или предоставления
                               подсказок по ее структуре.
                               # Важно - В элементе table элемент caption должен указываться прежде всех остальных!
        Объединение: Объединение столбцов достигается с помощью атрибута colspan в элементах td или th — ячейка
        растягивается вправо, охватывая последующие столбцы.  "<th colspan="2">Жиры (г)</th>"
                     Диапазоны строк, объединенные при помощи атрибута rowspan, ведут себя точно так же, как
                     объединенные диапазоны столбцов, с той лишь разницей, что диапазон ячеек задается сверху вниз
                     и охватывает несколько строк.

## Графика и изображение.
    Все изображения для сайтов, подразделяются:
        - растровые — JPG, JPEG, PNG, GIF (Состоит из пикселей, при масштабировании качество теряется);
        - векторные — SVG (Состоит из линий и точек маршрута).
    Тег <img> — указывает браузеру: «Вставь изображение сюда».
    - <img src="image.jpg" alt="Описание изображения">
    * Атрибуты src и alt являются обязательными.
      Src - сообщает браузеру расположение файла изображения;
      Alt - передаёт замещающий текст, который отображается на сайте, если изображение не доступно.
    * Атрибуты width и height задают размеры изображения, измеряемые в количестве пикселов (с их помощью можно ускорить
      загрузку страницы на несколько секунд)
        - <img src="apple.jpg" width="400" height="400" alt="Яблоко">

## Формы (допустим форма авторизации на сайте).
    - <form>...</form> - формы вставляются на веб-страницы посредством элемента form. Он представляет собой контейнер 
        для всего содержимого формы, включая такие элементы, как текстовые поля и кнопки, а также блочные элементы 
        (например, h1, р и списки). Однако он не может содержать в себе другой элемент form.
    * Одна из наиболее часто встречающихся задач веб-формы — ввод текстовой информации. Какой элемент для этого 
    использовать, зависит оттого, требуется ли пользователям ввести одну строку текста (input) или несколько (textarea).
    - Однострочное текстовое после:
        - <input type="text" name ='' id=''> - Однострочное текстовое поле
      - Атрибуты:    
        id - в названии атрибута id изначально заложен основной смысл — identifier, то есть идентификатор. Он задаёт 
             HTML-элементу уникальный идентификатор (ID), имя которого должно быть уникальным в документе (на странице). 
             Часто используется при создании ссылки на фрагмент страницы, получении доступа к элементу из JavaScript или 
             стилизации с помощью CSS.
        name - Атрибут name необходим для указания имени переменной. В отличие от идентификатора используется при
               обработке данных формы на стороне сервера.
        value - атрибутом value задается текст, который по умолчанию отображается в текстовом поле в момент загрузки
                формы. После очистки ее полей исходное значение восстанавливается.
        maxlength - По умолчанию пользователи могут вводить в текстовое поле неограниченное количество символов
                    независимо от размера поля (текст будет прокручиваться вправо, если его длина превышает количество 
                    символов, заданное шириной окна). Максимальное число символов текстового поля можно задавать с 
                    помощью атрибута maxlength, если этого потребует программа обработки формы.
    - Многострочное текстовое поле:
        - <textarea>...</textarea> - Многострочное текстовое поле
      - Атрибуты:
        rows -  указывает, сколько строк должно отображаться в текстовой области
        cols - определяет ширину в количестве символов.
      * Если пользователь вводит больше текста, чем помещается в отведенное пространство, появится ползунок полосы 
        прокрутки.
    - Поле ввода пароля:
        * Поле ввода пароля работает точно так же, как обычное текстовое, с той лишь разницей, что при вводе символы
          заменяются на звездочки (*), маркеры (•) или какие-либо другие устанавливаемые браузером значки.
        - <input type="password"> - Поля для ввода пароля.
    - Поля ввода текста в HTML5:
        - <input type="checkbox"> - Флажок.
        - <input type="color"> - Виджет для выбора цвета.
        - <input type="date"> - Поле для ввода календарной даты (год, месяц, день).
        - <input type="datetime"> - Поле для ввода даты и времени.
        - <input type="datetime-local"> - Поле для ввода даты и местного времени.
        - <input type="email"> - Поле для ввода адреса электронной почты.
        - <input type="file"> - Поле для ввода имени файла, который пересылается на сервер.
        - <input type="hidden"> - Скрытое поле (не отображается на Web-странице). Используется для технических целей, 
            например, для того, чтобы передать на сервер системный идентификатор пользователя в системе.
        - <input type="image"> - Графическая кнопка отправки данных формы на сервер. Вместе с этим значением нужно 
            использовать атрибут src, чтобы определить адрес изображения и атрибут alt для определения альтернативного 
            текста. Можно также задать атрибуты width и height, чтобы определить размер изображения в пикселях.
        - <input type="month"> - Поле для ввода месяца и года.
        - <input type="number"> - Поле для ввода чисел.
        - <input type="password"> - Поле для ввода пароля.
        - <input type="radio"> - Переключатели (радио-кнопки). Выбрать можно только один вариант. Атрибут checked
            указывает, что вариант выбран по умолчанию.
        - <input type="range"> - Ползунок для ввода чисел в указанном диапазоне. Если соответствующие атрибуты не 
            указаны, то значения по умолчанию:
        - <input type="search"> - Поле для ввода строки поиска.
        - <input type="tel"> - Поле для ввода номера телефона.
        - <input type="text"> - Текстовое поле.
        - <input type="time"> - Поле для ввода времени.
        - <input type="url"> - Поле для ввода Web-адреса.
        - <input type="week"> - Поле для ввода номера недели и года.
    - Переключатели и флажки:
        - <input type="radio" name=""> - Переключатель. Когда один переключатель «включен», все остальные отключены 
            (например, да или нет, или мужчина или женщина). Переключатели размечают в форме также с помощью элемента 
            input, при этом атрибуту type следует присвоить значение radio. Атрибут name обязателен
        * Наличие атрибута checked в элементе input указывает на то, что переключатель при загрузке формы будет
          установлен в это положение.
        - <input type="checkbox"> - Флажок.  В отличие от переключателей, для каждого флажка назначается уникальное имя 
            в атрибуте name.
    - Списки:
        - <select>...</select> - Список.
        - <option>...</option> - Пункт списк.
        - Раскрывающиеся списки:
            - Элемент select отображается как раскрывающийся список (также называемый раскрывающимся или выпадающим 
              меню) по умолчанию, когда размер не задан или атрибуту size присвоено значение 1. В раскрывающемся списке
              возможен выбор только одного из пунктов. Приведем пример.
              "<select name="EightiesFave">
                <option value="1">The Cure</option>
              </select>"
        - Прокручиваемые списки:
            Для отображения прокручиваемого списка укажите число видимых строк, введя соответствующее значение
            атрибута size. Этот код ничем не отличается от приведенного в предыдущем примере, за исключением того, что
            в данном случае формируется список высотой в шесть строк.
            <select name="EightiesFave" size="6" multiple>
            - Атрибут multiple позволяет пользователям выбрать более одного элемента в списке.
            * Указав в элементе option атрибут selected, вы сделаете его значением по умолчанию для данного списка. При
              загрузке страницы такие элементы будут выделены. Атрибут selected можно указывать для обоих типов списков.
        - Кнопки отправки данных и сброса:
            - <input type="reset"> - Кнопка сброса данных формы в первоначальное состояние.
            - <input type="submit"> - Кнопка для отправки данных формы на сервер.
            * Это единственные элементы формы, для которых не нужно указывать атрибут name, поскольку они выполняют
              специальные функции, которые не подразумевают ввода каких-либо данных, однако, его можно добавить при
              необходимости.


------------------------------------------------------------------------------------------------------------------------


# Основы CSS.
  * Таблица стилей составлена из одной и более инструкций (называемых правилами или наборами правил), которые описывают,
    как элемент или группа элементов должны отображаться. Первый шаг в изучении CSS — это знакомство с частями правил. 
    Как вы увидите, они понятны интуитивно. Каждое правило выбирает элемент и объявляет, как он должен выглядеть


## Написание правил CSS.
- Согласно терминологии CSS существует две главные части правила — это селектор, устанавливающий элемент или элементы, 
на которые надо воздействовать, и определение, предоставляющее инструкции представления. Определение, в свою очередь, 
составлено из свойства (например, color) и его значения (green) , разделенных двоеточием и пробелом. Одно или более 
определений размещаются внутри фигурных скобок: 
       h1 { color: green; }
       p { font-size: small; font-family: sans-serif; }

- Селекторы
В предыдущем небольшом примере элементы <h1> и <p> выступают как селекторы. Этот наиболее часто используемый тип 
селектора называется селектор элемента. Свойства, определенные для каждого селектора, будут соответственно применяться 
ко всем элементам <h1> и<p> в документе.

- Определения
Определение составлено из пары свойство/значение. Допустимо использовать несколько определений в одном правиле,
например, указанное выше правило для элемента <p> имеет свойства как font-size, так и font-family.
Каждое определение должно оканчиваться точкой с запятой для отделения его от следующего. Если вы пропустите этот знак
препинания, то следующее за ним определение будет игнорироваться.
Фигурные скобки и заключенные в них определения часто называются блоком определения.


## Присоединение CSS к HTML-документу
1) Метод 1: Встроенные стили (атрибут style)
Можно применять CSS к HTML с помощью HTML-атрибута style. Красный цвет текста для абзаца можно установить так:

    <!DOCTYPE html>
    <html>
     <head>
      <meta charset="utf-8">
      <title>Пример встроенных стилей</title>
     </head>
     <body> 
      <p style="color: red;">Это текст будет отображаться красным цветом</p>
     </body>
    </html>

                  
2) Метод 2: Глобальные таблицы стилей
    <!DOCTYPE html>
    <html>
     <head>
      <meta charset="utf-8">
      <title>Пример глобальных стилей</title>
      <style type="text/css">
       p { color: red; }
      </style>
     </head>
     <body> 
      <p>Это текст будет отображаться красным цветом</p>
     </body>
    </html>

                  
3) Метод 3: Внешние таблицы стилей
Рекомендуемый метод - создание ссылки на так называемую внешнюю таблицу стилей.
Внешняя таблица стилей - это просто текстовый файл с расширением .css
   * Весь фокус состоит в том, чтобы создать ссылку из HTML-документа index.html на таблицу стилей style.css. Это можно 
   сделать одной строчкой HTML-кода:
   
       <!DOCTYPE HTML>
    <html>
     <head>
      <meta charset="utf-8">
      <title>Пример глобальных стилей</title>
      <link rel="stylesheet" href="css/style.css">
     </head>
     <body>
      <p>Это текст будет отображаться красным цветом</p>
     </body>
    </html>
   
   Значение атрибута тега <link> — rel остаётся неизменным независимо от кода, как приведено в данном примере. 
   Значение href задаёт путь к CSS-файлу, он может быть задан как относительно, так и абсолютно. Заметьте, что таким 
   образом можно подключать таблицу стилей, которая находится на другом сайте. Эта ссылка указывает браузеру, что он 
   должен использовать правила отображения HTML-файла из CSS-файла. Самое важное здесь то, что несколько HTML-документов
   могут ссылаться на одну таблицу стилей. Иначе говоря, один CSS-файл можно использовать для управления отображением 
   множества HTML-документов.
   Содержимое файла style.css подключаемого посредством тега <link> будет следующим:
   p { color: red; }


## Комментарии в таблицах стилей.
Иногда полезно оставлять себе или коллегам комментарии в таблице стилей. Язык CSS имеет свой собственный синтаксис
комментариев, показанный здесь:
    /* здесь находятся комментарии */

## Основные селекторы CSS.
- Селектор элемента: p { color: navy; }    
    В данном случае 'p' является селектором элемента. Правило "color" применяется ко всем элементам "p".

- Сгруппированные селекторы: p, ul, a { color: navy; }
    С помощью такого правила свойство CSS будет применено сразу к нескольким элементам (р, ul, a).
    * Примечание: Отрицательной стороной такого способа выбора элементов согласно селекторам, конечно же, является то,
      что свойство (в данном случае, темно-синий цвет текста) будет применяться к каждому абзацу и другим перечисленным 
      элементам в документе. А иногда требуется применить правило к конкретному абзацу или абзацам.

- Селекторы идентификатора: Селекторы идентификатора позволяют вам целенаправленно выбирать элементы по их id значениям.
    Символ, с помощью которого распознаются селекторы идентификатора, — знак числа #, также называемый знаком «решетка».
    Ниже приведен пример пункта списка с идентификатором catalog1234:
    <li id="catalog1234">Майка со смайликом</li>
    Теперь вы можете написать правило стилей для этого пункта списка, используя селектор идентификатора наподобие этого 
  *   (обратите внимание, символ # предшествует ссылке id):
      li#catalogl234 { color: red; }
      Из-за того, что значения id должны быть уникальными в документе, допускается пропустить имя элемента. Это правило 
      эквивалентно последнему:
      #catalog1234 { color: red; }

- Селекторы классов:
    Другим идентификатором элемента является идентификатор class, используемый для группировки элементов в одну
    концептуальную группу. В отличие от атрибута id, имя класса class могут разделять несколько элементов. Кроме того,
    элемент может принадлежать более чем одному классу. Ниже приведен пример, в котором заголовку h3 и двум абзацам
    назначен класс special:
        <h3 class="special">Этот заголовок будет оранжевого цвета</h3>
        <p>Этот текст будет стандартного цвета</p>
        <p class="special">Этот текст будет оранжевого цвета</p>
        <p class="special">Этот текст будет оранжевого цвета</p>
    Вы можете целенаправленно выбирать элементы, принадлежащие одному и тому же классу при помощи селектора класса.
    Имена классов указываются при помощи точки (.) в селекторе. Например, чтобы выбрать все абзацы класса
    class="special", используйте этот селектор (точка указывает, что следующее за ней слово является селектором класса):
        p.special { color: orange; }
    Чтобы применить свойство ко всем элементам одного класса, пропустите имя элемента в селекторе (убедитесь, что
    оставили точку; это символ, который указывает на класс). Так вы целенаправленно выберете все абзацы и любой другой
    элемент, который был размечен как class="special":
        .special { color: orange; }

- Селекторы потомков:
     Селектор потомков целенаправленно выбирает элементы, которые содержатся внутри (и поэтому они потомки) другого
     элемента.Потомком называются любые элементы, расположенные внутри родительского элемента. А дочерними элементами
     называются ближайшие потомки.

             <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8">
            <title>Селекторы потомков</title>
            <style>
              li em { color: olive; }
            </style>
          </head>
          <body>
            <h2>Селекторы <em>потомков</em></h2>
            <p><em>Абзац</em>, в котором некоторые слова отображаются <em>курсивом</em></p>
            <ul>
              <li>Элемент списка 1</li>
              <li><em>Элемент списка 2</em></li>
              <li><em>Элемент списка 3</em></li>
            </ul>
          </body>
        </html>

     Этот пример целенаправленно выбирает элементы акцентированного текста (em), но только когда они появляются в
     пунктах списка (li). Акцентированный текст в абзацах и другие элементы не подвергнутся воздействию свойства CSS.
       li em { color: olive; }
     Символ пробела между именами элементов означает, что второй элемент должен содержаться внутри первого.
     Таким образом, оливковым цветом будут выделены только элементы списка,  заключенные в тег em.